[gd_scene load_steps=10 format=3 uid="uid://bwagfreaxaggi"]

[ext_resource type="Script" path="res://test/TestScene.gd" id="1"]
[ext_resource type="Texture2D" uid="uid://2u4fu5eycj8x" path="res://player/player0.png" id="2"]
[ext_resource type="Texture2D" uid="uid://k5yvohgmxacm" path="res://ui/background/512blue01.png" id="3"]
[ext_resource type="Environment" path="res://effects/env_glow.tres" id="4"]

[sub_resource type="Shader" id="7"]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/teleport-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform float progress : hint_range(0.0, 1.0);
uniform float noise_desnity = 60;
uniform float beam_size : hint_range(0.01, 0.15);
uniform vec4 color : source_color = vec4(0.0, 1.02, 1.2, 1.0);

// We are generating our own noise here. You could experiment with the 
// built in SimplexNoise or your own noise texture for other effects.
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

void fragment()
{
	vec4 tex = texture(TEXTURE, UV);
	
	float noise = noise(UV * noise_desnity) * UV.y;
	
	float d1 = step(progress, noise);
	float d2 = step(progress - beam_size, noise);
	
	vec3 beam = vec3(d2 - d1) * color.rgb;
	
	tex.rgb += beam;
	tex.a *= d2;
	
	COLOR = tex;
}"

[sub_resource type="ShaderMaterial" id="8"]
shader = SubResource("7")
shader_parameter/progress = 0.202
shader_parameter/noise_desnity = 15.0
shader_parameter/beam_size = 0.15
shader_parameter/color = Color(0, 1.02, 1.2, 1)

[sub_resource type="AtlasTexture" id="2"]
atlas = ExtResource("2")
region = Rect2(0, 0, 32, 44)

[sub_resource type="AtlasTexture" id="3"]
atlas = ExtResource("2")
region = Rect2(32, 0, 32, 44)

[sub_resource type="SpriteFrames" id="9"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("2")
}, {
"duration": 1.0,
"texture": SubResource("3")
}],
"loop": true,
"name": &"default",
"speed": 15.0
}]

[node name="TestScene" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1")

[node name="Timer" type="Timer" parent="."]

[node name="Label" type="Label" parent="."]
layout_mode = 0
offset_right = 40.0
offset_bottom = 14.0
text = "Pattern type: "

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = ExtResource("4")

[node name="ParallaxBackground" type="ParallaxBackground" parent="."]

[node name="ParallaxLayer" type="ParallaxLayer" parent="ParallaxBackground"]
motion_mirroring = Vector2(0, 512)

[node name="Sprite2D" type="Sprite2D" parent="ParallaxBackground/ParallaxLayer"]
texture = ExtResource("3")
centered = false
region_enabled = true
region_rect = Rect2(0, 0, 540, 960)

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
material = SubResource("8")
position = Vector2(80, 71)
sprite_frames = SubResource("9")

[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
