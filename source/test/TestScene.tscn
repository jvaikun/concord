[gd_scene load_steps=10 format=2]

[ext_resource path="res://test/TestScene.gd" type="Script" id=1]
[ext_resource path="res://player/player0.png" type="Texture" id=2]
[ext_resource path="res://ui/background/512blue01.png" type="Texture" id=3]
[ext_resource path="res://effects/env_glow.tres" type="Environment" id=4]

[sub_resource type="Shader" id=7]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/teleport-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform float progress : hint_range(0.0, 1.0);
uniform float noise_desnity = 60;
uniform float beam_size : hint_range(0.01, 0.15);
uniform vec4 color : hint_color = vec4(0.0, 1.02, 1.2, 1.0);

// We are generating our own noise here. You could experiment with the 
// built in SimplexNoise or your own noise texture for other effects.
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

void fragment()
{
	vec4 tex = texture(TEXTURE, UV);
	
	float noise = noise(UV * noise_desnity) * UV.y;
	
	float d1 = step(progress, noise);
	float d2 = step(progress - beam_size, noise);
	
	vec3 beam = vec3(d2 - d1) * color.rgb;
	
	tex.rgb += beam;
	tex.a *= d2;
	
	COLOR = tex;
}"

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 7 )
shader_param/progress = 0.202
shader_param/noise_desnity = 15.0
shader_param/beam_size = 0.15
shader_param/color = Color( 0, 1.02, 1.2, 1 )

[sub_resource type="AtlasTexture" id=2]
atlas = ExtResource( 2 )
region = Rect2( 0, 0, 32, 44 )

[sub_resource type="AtlasTexture" id=3]
atlas = ExtResource( 2 )
region = Rect2( 32, 0, 32, 44 )

[sub_resource type="SpriteFrames" id=9]
animations = [ {
"frames": [ SubResource( 2 ), SubResource( 3 ) ],
"loop": true,
"name": "default",
"speed": 15.0
} ]

[node name="TestScene" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 1 )

[node name="Timer" type="Timer" parent="."]

[node name="Label" type="Label" parent="."]
margin_right = 40.0
margin_bottom = 14.0
text = "Pattern type: "

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = ExtResource( 4 )

[node name="ParallaxBackground" type="ParallaxBackground" parent="."]

[node name="ParallaxLayer" type="ParallaxLayer" parent="ParallaxBackground"]
motion_mirroring = Vector2( 0, 512 )

[node name="Sprite" type="Sprite" parent="ParallaxBackground/ParallaxLayer"]
texture = ExtResource( 3 )
centered = false
region_enabled = true
region_rect = Rect2( 0, 0, 540, 960 )

[node name="AnimatedSprite" type="AnimatedSprite" parent="."]
material = SubResource( 8 )
position = Vector2( 80, 71 )
frames = SubResource( 9 )

[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
